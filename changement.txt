- passe de Start/Until/Stop à StartUntil :
    programme du train toujours composé de séquence Start/Until/Stop, plus pratique 
    d'avoir une commade faisant les trois (juste adapter les règles)

----------

- un évènement par tronçon (même si ev vide) :
    permet d'unifier until et until_ev, et donc d'avoir moins de règles

----------

- enlever la position dans l'event :
    retire de la redondance
    -> R.A devient un compteur qui décrémente à chaque transition

- tenter de retirer apply des règles :
    faire ressortir le comportement des events dans les règles

----------

- Ajouter une règle IDLE dans TLA+ pour régler le problème de deadlock (+ajouter WF à Next)

----------

- Besoin d'un troisième argument pour turn (id du train concerné)
    - dans m0, on pouvait tricher car un turn est (quasi) toujours accompagné d'un att, donc le att renvoyait l'autorisation
      possible d'utiliser la même méthode pour m1, mais volonté de faire plus "clean"
    - pour les turn isolé (scénar4) la garantie d'exécuter l'event dans le m0 était un garde-fou contre les problèmes de ce genre.
      ces protections enlevées dans le m1 font apparaître ce besoin

- Pour le message d'auth, rajoute rel_calc : << id_train, auth, rel_calc >>
    - rel_calc permet de dire que l'autorisation donné à été accordé quand le train était à la position relative rel_calc.
    Cela permet de contrer le problème de synchronisation : si une autorisation est donné et que le train 
    avance sans la consulter, tous se décale

----------

- sépare turn en deux règles :
    - le cas où on tourne l'aiguillage pour nous (on doit donner une autorisation suite à l'event)
    - le cas où l'aiguillage est pour un autre train (un incr ou att fera le taff de donner l'autorisation => évite les doublons)

- Until_cons n'envoi plus de message au régulateur, mais Stop oui : pour éviter les doublons et avoir la bonne 
direction pour FindSection (l'event pouvait être exécuter avant le changement de dir et donc ça provoquait une erreur)

----------

- Turn ne donne plus d'autorisation, regroupé les deux règles en une seul
    - création de l'ordre d'event "auth", permettant de manipuler les feux pour atteindre le prochain point d'arrêt
    
----------

- StartUntil ne contient plus que la destination mais tous le sillon. Permet d'obtenir plus de robustesse pour la futur composition

----------

- Changement de la forme des events pour retirer la position relative 

---------

- Modèle n°2, on extrait la garde et les feux du régulateur pour les considérer comme "élément du modèle" à part entière.
	- Permets d'avoir une sécurité de plus apportée par les feux (plus proche du réel)

---------

- supprime H à la faveur d'une réecrire de W qui devient un set de quadruplet (tid,pid,canton,token-value)
    - simplifie l'écriture du régulateur et retrouve les "lock" plus simplement 
- extrait les aiguillages du régulateurs pour les considérer comme une variables à part entière
    - pas d'influence sur les règles
- mise à jour des feux après chaque mouvement de train ou fin d'event (même si pas nécessaire)
    - simule au mieux le vrai comportement

---------
